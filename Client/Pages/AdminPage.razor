@page "/admin"
@inject HttpClient HttpClient

<link href="css/AdminPage.css" rel="stylesheet" />
<h1>Данные пользователей и анализ ИИ</h1>

@if (isLoading)
{
    <p>Загрузка данных...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error-message">@errorMessage</p>
}
else
{
    <table class="data-table">
        <thead>
            <tr>
                <th>Компания</th>
                <th>Сфера</th>
                <th>Регион</th>
                <th>Масштаб</th>
                <th>Детали</th>
                <th>Ответы ИИ</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var registration in registrations)
            {
                <tr>
                    <td>@registration.BusinessName</td>
                    <td>@registration.Industry</td>
                    <td>@registration.Region</td>
                    <td>@registration.Scale</td>
                    <td>@registration.Details</td>
                    <td>
                        @if (aiResponses.TryGetValue(registration.BusinessName, out var responses))
                        {
                            <ul>
                                @foreach (var response in responses)
                                {
                                    <li><strong>@response.ModelName:</strong> @response.ResponseText</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Загрузка...</p>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RegistrationData> registrations;
    private Dictionary<string, List<AIResponse>> aiResponses = new();
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            registrations = await HttpClient.GetFromJsonAsync<List<RegistrationData>>("api/admin/registrations");

            foreach (var registration in registrations)
            {
                var request = new AIRequest
                    {
                        UserInput = $"Analyze the following business details:\n" +
                                    $"Business Name: {registration.BusinessName}\n" +
                                    $"Industry: {registration.Industry}\n" +
                                    $"Region: {registration.Region}\n" +
                                    $"Scale: {registration.Scale}\n" +
                                    $"Details: {registration.Details}",
                        SelectedModels = new List<string> { "GPT", "Claud" }
                    };

                var response = await HttpClient.PostAsJsonAsync("api/ai/selected-responses", request);
                if (response.IsSuccessStatusCode)
                {
                    var aiResponse = await response.Content.ReadFromJsonAsync<List<AIResponse>>();
                    aiResponses[registration.BusinessName] = aiResponse;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка при загрузке данных.";
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegistrationData
    {
        public string BusinessName { get; set; }
        public string Industry { get; set; }
        public string Region { get; set; }
        public string Scale { get; set; }
        public string Details { get; set; }
    }

    public class AIRequest
    {
        public string UserInput { get; set; }
        public List<string> SelectedModels { get; set; }
    }

    public class AIResponse
    {
        public string ModelName { get; set; }
        public string ResponseText { get; set; }

        public AIResponse(string modelName, string responseText)
        {
            ModelName = modelName;
            ResponseText = responseText;
        }
    }
}
