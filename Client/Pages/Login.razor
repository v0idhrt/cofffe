@page "/login"
@using SupportSystemCofe.Shared.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="login-page">
    <link href="css/Login.css" rel="stylesheet" />

    <div class="login-text">
        <h1>Вход</h1>
        <p>Введите ваши данные, чтобы войти в систему и получить доступ к платформе.</p>
    </div>

    <div class="login-form">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Введите ваш email" />
            </div>
            <div class="form-group">
                <label for="password">Пароль</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Введите ваш пароль" />
            </div>
            <button type="submit" class="btn-login">Войти</button>
            <a href="/registration" class="register-link">Нет аккаунта? Регистрация</a>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            // Отправляем запрос на авторизацию
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7120/api/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Читаем ответ с сервера
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                Console.WriteLine(result.Message);

                // Перенаправляем на профиль
                NavigationManager.NavigateTo(result.ProfileUrl);
            }
            else
            {
                // Обрабатываем ошибки авторизации
                errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Ошибка авторизации: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка подключения к серверу: {ex.Message}";
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    // Модель для чтения ответа от API
    private class LoginResponse
    {
        public string Message { get; set; }
        public string ProfileUrl { get; set; }
    }
}
